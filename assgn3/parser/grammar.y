%{
	#include <stdio.h>
	#include<stdlib.h>
	extern int yylex(void);
	extern int mylineno ;
	extern char* yytext ;
	void yyerror(char *);
%}
%union{
  int		int_val;
  double 	decimal_val;
  char      char_val;
  char*     id_val;
  struct node*     ptr;
}
%token IDENTIFIER BOOL INT FLOAT DOUBLE CHAR DO WHILE IF ELIF FALSE TRUE IN OUT MAIN VOID FOR INTCONST CHAR_CONSTANT RETURN STRUCT SWITCH WHITESPACE CASE ELSE DEFAULT CONSTANT STRING INP_OP OUT_OP OR_OP  INC_OP DEC_OP AND_OP LESS_EQ_OP GRE_EQ_OP DOUBLE_EQ_OP NOT_EQ_OP
%start START
%%


START : OUTER MAINF OUTER 
;

OUTER  :  |
 VARDEF OUTER| 
 STRUCT1 OUTER|
FUNCTION OUTER 
;


//VOID  :  "void"
//;

//INT  :  "int"
//;

MAINARG  :  | 
"int argc, char* argv[]"
;

MAINF  :  VOID MAIN'('MAINARG')''{'INNER'}'| 
INT MAIN'('MAINARG')''{'INNER'}'
;

TYPE  :  INT| BOOL| VOID| FLOAT| DOUBLE| STRUCT IDENTIFIER| TYPE'*'| CHAR
;

STRUCT1  :  STRUCT IDENTIFIER'{'MVARDEF VARDEF';''}';
;

MVARDEF  :  MVARDEF VARDEF';'|
;


FUNCTION  :  TYPE VARNAME'('FARG')''{'INNER'}'
;


INNER  :  
 LOOP INNER|
 CONDITIONAL INNER| 
VARDEF INNER| 
STRUCT INNER|
FCALL INNER| 
RETURN INNER| 
';'|
|
 INPUT INNER|
 OUTPUT INNER| 
MATH INNER
;

VARNAME  :  '*'VARNAME| '&'VARNAME| IDENTIFIER BRACKET
;

BRACKET  :  BRACKET'['INTMATH']'| 
;

MARG  :  MARG TYPE VARNAME','| 
;

FARG  :  MARG TYPE VARNAME
;

VARDEF  : TYPE MVAR VARNAME';'|
 TYPE MVAR VARNAME '=' CONST';'| 
TYPE MVAR VARNAME '=' FCALL';'| 
TYPE MVAR VARNAME '=' RMATH';'| 
TYPE MVAR VARNAME '=' VARNAME';'|
TYPE MVAR VARNAME '=' '{'MCONST CONST'}'';'
;

MVAR  :  MVAR VARNAME','| 
MVAR VARNAME '=' CONST','| 
MVAR VARNAME '=' FCALL','| 
MVAR VARNAME '=' RMATH','| 
MVAR VARNAME '=' VARNAME','|
MVAR VARNAME '=' MCONST','|

;

MCONST  :  MCONST CONST','|
;

MATH  :  VARNAME '=' RMATH';'| 
';'|
TYPE VARNAME '=' RMATH;|
VARNAME OPERATOR '=' RMATH';'|
VARNAME INC_OP';'|
VARNAME DEC_OP';'|
INC_OP VARNAME';'|
DEC_OP VARNAME';'
;

RMATH : VARNAME|
FCALL|
VARNAME INC_OP|
VARNAME DEC_OP|
INC_OP VARNAME|
DEC_OP VARNAME|
'('RMATH')'|
'!'RMATH|
CONST|
RADDSUB
;

RADDSUB  :  RMULTIDIV|
RADDSUB '-' RMULTIDIV|
RADDSUB '+' RMULTIDIV
;

RMULTIDIV  :  RMATH|
RMULTIDIV '*' RMATH|
RMULTIDIV '/' RMATH|
RMULTIDIV '%' RMATH
;

//for array indexing 
INTMATH  :  VARNAME|
FCALL|
'('INTMATH')'|
'!'INTMATH|
INTCONST|
ADDSUB|
VARNAME INC_OP|
VARNAME DEC_OP|
INC_OP VARNAME|
DEC_OP VARNAME|
;

ADDSUB  :  MULTIDIV|
ADDSUB '-' MULTIDIV|
ADDSUB '+' MULTIDIV
;

MULTIDIV  :  INTMATH|
MULTIDIV '*' INTMATH|
MULTIDIV '/' INTMATH|
MULTIDIV '%' INTMATH
;


CONDITIONAL  :  IFN| SWITCHN
;

IFN  :  IF'('COND')''{'INNER'}'ELSEC
;

RELATIONALOPERATOR  :  '>'|
'<'|
DOUBLE_EQ_OP|
NOT_EQ_OP|
LESS_EQ_OP|
GRE_EQ_OP
;

COND  :  '('COND')'|
COND"&&"COND|
COND"||"COND|
'!'COND|
RMATH|
COND RELATIONALOPERATOR COND
;

ELSEC  :  ELIF '('COND')' '{'INNER'}' ELSEC| ELSE '{'INNER'}'| 
;

SWITCHN  :  SWITCH'('COND')''{'SWITCHINNER'}'
;

SWITCHINNER  :  CASE CONST':''{'INNER'}' SWITCHINNER| 
CASE CONST':' INNER SWITCHINNER|
DEFAULT':''{'INNER'}' WODEFAULT|
DEFAULT':' INNER WODEFAULT|

;

WODEFAULT  :  CASE CONST':''{'INNER'}' WODEFAULT| 
CASE CONST':' INNER WODEFAULT|

;

ARGT  :  MARGT RMATH 
;
MARGT  :  MARGT RMATH','| 
;
FCALL  :  VARNAME'('ARGT')'
;


LOOP  :  FORN| WHILEN| DOWHILEN
;

FL1 :  MATH| ;
FL2 :  COND| ;
FL3  :  VARNAME '=' RMATH| 
TYPE VARNAME '=' RMATH|
VARNAME OPERATOR'=' RMATH|
VARNAME INC_OP|
VARNAME DEC_OP|
INC_OP VARNAME|
DEC_OP VARNAME
;

OPERATOR  :  '+'|
'-'|
'*'|
'/'|
'&'|
'^'|
'|'|
'%'
;

FORN  :  FOR'('FL1 FL2';' FL3')''{'INNER'}'
;

WHILEN : WHILE'('COND')''{'INNER'}'
;

DOWHILEN  :  DO'{'INNER'}'WHILE'('COND')'';'
;

MIN  :  MIN INP_OP VARNAME|
;


MOUT  :  MOUT OUT_OP VARNAME|
MOUT OUT_OP CONST| 
MOUT OUT_OP WHITESPACE|

;

INPUT  :  IN MIN INP_OP VARNAME';'
;

OUTPUT  :  OUT MOUT OUT_OP VARNAME';'|
OUT MOUT OUT_OP CONST ';'|
OUT MOUT OUT_OP WHITESPACE';'
;

CONST :  TRUE|
FALSE|
INTCONST|
FLOAT|
DOUBLE|
CHAR_CONSTANT
;