
//Wasting 3 lines to make it 200 lines

OUTER : [empty] |
COMMENT OUTER |
VARDEF OUTER | 
STRUCT OUTER |
FUNCTION OUTER | 
MACRO OUTER

START : OUTER MAIN OUTER 



MACRO : "#define" IDENTIFIER TEXT							//TEXT doesn't allow whitespace

COMMENT : /* TEXT1 */ | //TEXT2							//TEXT1 doesn't allow */ and TEXT2 doesn't allow \n

VOID : "void"

INT : "int"

MAINARG : [empty] | 
"int argc, char* argv[]"

MAIN : VOID "main("MAINARG"){"INNER"}" | 
"int main("MAINARG"){"INNER"}"


TYPE : "int" | "bool" | "void" | "float" | "double" | "struct" IDENTIFIER | TYPE"*" | "char"


STRUCT : "struct" INDENTIFIER"{"MVARDEF VARDEF";};"

MVARDEF : MVARDEF VARDEF ";"|
[empty]


FUNCTION : TYPE VARNAME"("FARG"){"INNER}"



INNER : COMMENT INNER |
 LOOP INNER |
 CONDITIONAL INNER | 
VARDEF INNER | 
STRUCT INNER |
FCALL INNER | 
RETURN INNER | 
";"|
[empty] |
INPUT INNER |
OUTPUT INNER | 
MATH INNER | 
ASSIGN INNER

VARNAME : *VARNAME | &VARNAME | IDENTIFIER BRACKET
BRACKET : BRACKET[INTMATH] | [empty]

MARG : MARG TYPE VARNAME, | [empty]
FARG : MARG TYPE VARNAME

VARDEF :TYPE MVAR VARNAME; |
 TYPE MVAR VARNAME = CONST; | 
TYPE MVAR VARNAME = FCALL; | 
TYPE MVAR VARNAME = RMATH; | 
TYPE MVAR VARNAME = VARNAME;|
TYPE MVAR VARNAME = {MCONST CONST};


MVAR : MVAR VARNAME, | 
MVAR VARNAME = CONST, | 
MVAR VARNAME = FCALL, | 
MVAR VARNAME = RMATH, | 
MVAR VARNAME = VARNAME, |
MVAR VARNAME = MCONST, |
[empty]


MCONST : MCONST CONST,|[empty]


OPERATOR : +|
-|
*|
/|
&|
^|
||
%

MATH : VARNAME = RMATH; | 
;|
TYPE VARNAME = RMATH; |
VARNAME OPERATOR= RMATH; |
VARNAME++; |
VARNAME--; |
++VARNAME; |
--VARNAME;


RMATH = VARNAME|
FCALL|
VARNAME++ |
VARNAME-- |
++VARNAME |
--VARNAME|
(RMATH)|
!RMATH |
CONST|
RMATH OPERATOR RMATH


//for array indexing 
INTMATH : VARNAME|
FCALL|
(INTMATH) |
!INTMATH |
INTCONST|
INTMATH OPERATOR INTMATH|
VARNAME++ |
VARNAME-- |
++VARNAME |
--VARNAME|


CONDITIONAL : IFN | SWITCHN


IFN : if(COND){INNER}ELSE


RELATIONALOPERATOR : >|
<|
==|
!=|
<=|
>=


COND : (COND)|
COND&&COND |
COND||COND |
!COND |
RMATH |
COND RELATIONALOPERATOR COND

ELSE : elif (COND) {INNER} ELSE | else {INNER} | [empty]


SWITCHN : switch(COND){SWITCHINNER}

SWITCHINNER : case CONST:{INNER} SWITCHINNER | 
case CONST: INNER SWITCHINNER |
default:{INNER} WODEFAULT|
default: INNER WODEFAULT|
[empty]


WODEFAULT : case CONST:{INNER} WODEFAULT | 
case CONST: INNER WODEFAULT|
[empty]

ARGT : MARGT RMATH 
MARGT : MARGT RMATH,| [empty]
FCALL : VARNAME(ARGT)



LOOP : FOR | WHILE

FL1: MATH | [empty]
FL2: COND | [empty]
FL3 : VARNAME = RMATH | 
TYPE VARNAME = RMATH|
VARNAME OPERATOR= RMATH |
VARNAME++|
VARNAME--|
++VARNAME|
--VARNAME


FOR : for(FL1 FL2; FL3){INNER}

WHILE:while(COND){INNER}

DOWHILE : do{INNER}while(COND);

MIN : MIN >>VARNAME |[empty]


MOUT : MOUT <<VARNAME |
MOUT << CONST | 
MOUT << WHITESPACE |
[empty]


INPUT : in MIN >> VARNAME;


OUTPUT : out MOUT << VARNAME;|
out MOUT << CONST ;|
out MOUT << WHITESPACE;
